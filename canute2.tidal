import Sound.OSC.FD

myk <- dirtStream

let startMYK = do x <- udpServer "10.0.1.5" 4040
                  --mvMYK <- newMVar silence 
                  mvF <- newMVar (const silence)
                  forkIO $ mykLoop x (mvF :: MVar (Pattern Int -> OscPattern))
                  return (mvF)
    mykLoop x mv = do m <- recvMessage x
                      act m mv
                      mykLoop x mv
    act (Just (Message "/tidal" [ASCII_String str])) mvF = 
      do let pat = ((p $ tail $ init $ show str) :: Pattern Int)
         f <- readMVar mvF
         myk $ f pat
         putStrLn $ "got '" ++ (show str) ++ "'"
         putStrLn $ "parsed as " ++ (show pat)
         return ()
    act _ _ = return ()

mv <- startMYK


swapMVar mv $ \x -> stack [jux (iter 2) $ sound (pick <$> "drum*16" <*> (slow 1 $ x))
                           |+| speed "[0.5,1]/2"
                           |+| end "0.5"
                          ]

d2 $ echo 0.5 $ juxcut (rev) $ every 3 rev $ striate 16 $ sound "rave:6"

hush

d2 $ every 2 (slow 2) $ (juxcut (rev . iter 8) $ every 4 (0.25 <~) $ striate 4 $ sound "[breaks165, breaks125]")
  |+| speed "[2 1 1]/2"

d1 $ slow 2 $ jux (iter 4) $ every 4 (0.5 <~) $ sound "bd ~ sid:4 sid:3 bd casio:1 drum:1 ~ bd ~ cp ~ bd ~ cp ~"
  |+| speed "[1 1.1 1.3]/4"


d3 $ every 2 (slow 2) $ jux rev $ slow 2 $ smash 32 [1,2,0.5,4] $ sound "sax ~ sax/2 ~"
  |+| speed "2"
  |+| shape "0.2"



d4 $ (juxcut (rev) $ slow 4 $ striate 16 $ sound "[bev*2]/2")
  -- |+| vowel "[a e i o u]/2"
  |+| cutoff (slow 8 $ (+0.01) . (*0.04) <$>sine1)
  |+| resonance "0.7"
  |+| shape "0.7"
  |+| speed "0.5"

d5 $ sound "bd*4"

hush

d1 $ sound "sn/2"
  |+| pan "0"

d3 $ slow 4 $ every 2 (0.25 <~) $ juxcut (iter 8 . echo 0.125) $ sound "bass1:5 ~ bass3:2"
  |+| end "0.1"
  |+| speed "3"

d2 $ stack [slow 2 $ smash 4 [2,0.5] $ whenmod 4 2 (density 4) $ every 2 (0.25 <~) $ juxcut (rev) $ sound "dr55:5 dr55 dr55:3 bass1:2 dr55:1 ~ dr55 dr55:2"
            |+| speed "2",
            sound "bd"
           ]




d4 $ every 3 (density 2) $ brak $ sound "drum drum:1"

d5 $ sound "birds3*8"

d2 $ slow 2 $ every 3 (slow 2) $ jux (rev) $ every 4 (slow 2) $ sound "bd*3 bd*4 bd*8 bd*8"
  |+| speed "4"

d3 $ slow 2 $ every 3 (density 2) $ jux (rev)  $ sound "~ bass1 wobble*2 bass1:1"
  |+| shape "0.8 0.5"
  |+| speed (every 3 ((*2) <$>) $ "2 1.5 4")
  |+| end "0.2"

d4 $ slow 2 $ every 2 (slow 2) $ every 2 (density 2) $ jux (iter 4)  $ sound "wobble bass1 wobble bass1:1"
  |+| shape "0.8 0.5"
  |+| speed (every 3 ((*4) <$>) $ "[2 3 6 4]/2")
  |+| end "0.2"

d1 $ sound "drum sn:2"

d5 $ every 2 (slow 2) $ jux (iter 4) $ sound "gabbaloud gabbalouder bass3:2 off*2"

bps $ 150/60

d6 $ every 4 ((1/2) <~) $ sound "future sn:2 bd*4 ~"
  |+| shape "0.4"
  |+| speed "1 2"
  |+| vowel "[a e i o u]/3"
  |+| pan "0"

d5 $ every 3 ((1/2) <~) $ sound "perc*2 future drum bd"
  |+| shape "0.4"
  |+| speed "1 2"
  |+| vowel "[a e i o u]/3"
  |+| pan "0"

d7 $ whenmod 4 2 (0.5 <~) $ sound "~ gabbaloud*2"



d3 $ sound "can can/2"

d6 $ every 3 rev $ (density 2 $ jux rev $ striate 8 $ every 3 (slow 2) $ sound "bd*4 sn")
  |+| speed "[2 1]*8"

d2 $ (striate 32 $ sound "[newnotes*4 bass3:4*4]/2"
  |+| shape "0.2")
  |+| speed "[2 3 4 5 6, 4 3 2]/4"



d1 $ every 3 rev $ jux (iter 8) $ brak $ sound "[drum*3 drum:1*4 drum:3*8, hc*8]"
  |+| speed "2 1"

hush


d1 $ smash 4 [1,2,3,4] $ sound "bin bin:1*2"



  
d2 $ every 3 (rev) $ jux (iter 4 . (|+| vowel "a o") ) $ sound (pick <$> "bd*4 cp [bass1:5 ~ bass1:5 cp] alphabet" <*> (slow 5 $ run 26))
  |+| shape "0.2"
  |+| speed "[1 2]/2"

d3 $ juxcut (iter 8) $ sound (pick <$> "amencutup*8"<*> (slow 5 $ run 9))
  |+| shape "0.5"
  |+| pan rand
  |+| speed (rand)


d4 $ juxcut rev $ every 4 rev $ every 2 (0.25 <~) $ slow 16 $ striate 64 $ sound "bev*2"
  |+| speed "[2 0.5]"

d5 $ jux rev $ every 3 (smash 4 [1,8,3,5,0.1]) $ sound "gabbaloud bleep:4 off"
  |+| speed "8"
  |+| end "0.7"

hush
