

d1 $ slow 2 $ every 2 (density 2) $ stack [sound "{jungbass*3 jungbass/1*4, jungbass/5 [east*3 east/3*2] east/2*4}"
                                  |+| speed "[2 1 3]/2"
                                  |+| shape "0.5",
                                  every 3 (density 2) $ every 2 (jux rev) $ sound (samples "east*8" "{1 2 3, 4 5 6 7, 8 9 10 11 12}")
                                  |+| speed "[2 1]/2"
                                  |+| end "0.2"
                                 ]


d2 $ sound "bd*3 sn/2"
  |+| shape "0.8"

hush
bps $ 126/60

d1 $ every 4 (density 2) $ slow 2 $ sound "{hit ~ hit*3 ~, hit/2 hit/3*3 [hit/5 hit/6]/2, odx*2}"
  |+| speed "[1.4 2 0.5]/2"

d2 $ every 3 (slow 2) $ sound "drum*3 drum/2*8"
  |+| shape "0.5"

d3 $ whenmod 8 6 (((1/8) <~) . (slow 2)) $ sound "gabba*2 drum/1" 
  |+| shape "[0.9 0.4]/3"

d4 $ every 4 (density 2) $ superimpose ((1/8) <~) $ (slow 8 $ striate 32 $ sound "[pad:2 pad:4]/2"
  |+| shape "0.7")
  |+| speed "[1 1 [2,1 4] 1]"

d5 $ slow 8 $ jux (|+| speed "2") $ sound (samples "{h/2 stab sn/2 off, [alphabet alphabet*3]}" (run 26))

hush
:module +Sound.OSC.FD
:module +Data.Map
:module +Data.Maybe



let x = (sound "a b c" |+| speed "0 1")

:t ((\(ASCII_String s) -> Data.ByteString.Char8.unpack s) . fromJust . fromJust . Data.Map.lookup (param dirt "sound")) <$> x 

p "a b c" :: Pattern String

:t make
